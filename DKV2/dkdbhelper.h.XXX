#ifndef DKDBHELPER_H
#define DKDBHELPER_H

#include <QSqlDatabase>

#include <QDateTime>
#include <QList>
#include <QString>


#include "dbtable.h"
#include "dbfield.h"
#include "dbstructure.h"
#include "helpersql.h"

extern dbstructure dkdbstructur;
// THE structure of our database the single source of truth
void init_DKDBStruct();

bool create_DK_databaseFile(const QString& filename);
bool insert_views( QSqlDatabase db =QSqlDatabase::database());
bool create_DK_TablesAndContent(QSqlDatabase db = QSqlDatabase::database());

bool check_db_version(QSqlDatabase db = QSqlDatabase::database());
bool isValidDatabase(const QString& filename);
bool isValidDatabase(QSqlDatabase db = QSqlDatabase::database());

void closeDatabaseConnection(QString connection= QSqlDatabase::defaultConnection);
bool open_databaseForApplication( QString newDbFile="");

bool create_DB_copy(QString targetfn, bool anonym);

QString proposeContractLabel();
void create_sampleData(int datensaetze =20);

bool createCsvActiveContracts();

int numberOfCreditorsWithActiveContracts();
int numberOfActiveContracts();
double valueOfActiveContracts();
int numberOfInactiveContracts();
double valueOfInactiveContracts();
double weightedAverageInterest();
double averageInterest();

int numberOfActiveAccumulatingContracts();
double valueOfActiveAccumulatingContracts();
int numberOfActivePayoutContracts();
double valueOfActivePayoutContracts();

struct DbSummary
{
    // all contract summary
    int creditors =0;
    int contracts =0;
    double valueContracts =0.;
    double weightedAverageInterest =0.;
    double MittlererZins =0.;
    // active vs inactive
    int creditorsWithActiveContracts =0;
    int     activeContracts =0;
    double  valueActiveContracts =0.;
    int creditorsWithInactiveContracts =0;
    int     inactiveContracts =0;
    double  valueInactiveContracts =0.;
    
    // active: reinvesting vs. wPayout
    int     AnzahlAuszahlende =0;
    double  BetragAuszahlende =0.;
    int     AnzahlThesaurierende =0;
    double  WertThesaurierende =0.;

};

struct ContractEnd
{
    int year;
    int count;
    double value;
};
void calc_contractEnd(QVector<ContractEnd>& ce);
DbSummary calculateSummary();

struct YZV
{
    int year;
    double intrest;
    int count;
    double sum;
};
void calc_anualInterestDistribution( QVector<YZV>& yzv);
struct rowData
{
    QString text; QString number; QString value;
};

QVector<rowData> contractRuntimeDistribution();

#endif // DKDBHELPER_H
